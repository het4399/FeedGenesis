import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Download, Copy, Check, AlertCircle, Info } from "lucide-react";
import { useToast } from "@/hooks/ui/use-toast";
import { useState } from "react";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { SaveAssetDialog } from "./dialogs/SaveAssetDialog";

type GeneratorType = 'image' | 'video' | 'content' | 'combo';

interface GeneratedAsset {
  id: string;
  type: GeneratorType;
  url: string;
  instruction: string;
  timestamp: Date;
  source_system?: string;
  content?: string; // For content-type assets
  status?: string; // For tracking generation status
  runway_task_id?: string; // For RunwayML async tracking
  message?: string; // For any additional messages
}

interface AssetDisplayProps {
  assets: GeneratedAsset[];
  isGenerating: boolean;
}

export function AssetDisplay({ assets, isGenerating }: AssetDisplayProps) {
  const { toast } = useToast();
  const [copiedId, setCopiedId] = useState<string | null>(null);

  const handleDownload = (asset: GeneratedAsset) => {
    if (asset.url && asset.type !== 'content') {
      // Create a temporary link to download the asset
      const link = document.createElement('a');
      link.href = asset.url;
      link.download = `${asset.type}-${asset.id}`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      toast({
        title: "Download Started",
        description: `Downloading your ${asset.type}...`,
      });
    } else {
      toast({
        title: "Download Not Available",
        description: "This asset cannot be downloaded.",
        variant: "destructive",
      });
    }
  };

  const handleCopyContent = async (asset: GeneratedAsset) => {
    if (asset.content) {
      try {
        await navigator.clipboard.writeText(asset.content);
        setCopiedId(asset.id);
        setTimeout(() => setCopiedId(null), 2000);
        toast({
          title: "Content Copied",
          description: "Marketing content copied to clipboard!",
        });
      } catch (error) {
        toast({
          title: "Copy Failed",
          description: "Failed to copy content to clipboard.",
          variant: "destructive",
        });
      }
    }
  };

  const getAssetTypeColor = (type: GeneratorType) => {
    const colors = {
      image: "bg-blue-100 text-blue-800",
      video: "bg-purple-100 text-purple-800", 
      content: "bg-green-100 text-green-800",
      combo: "bg-orange-100 text-orange-800"
    };
    return colors[type];
  };

  const getProviderBadge = (sourceSystem?: string) => {
    if (!sourceSystem) return null;
    
    const providerColors = {
      runway: "bg-red-100 text-red-800",
      heygen: "bg-blue-100 text-blue-800",
      openai: "bg-green-100 text-green-800"
    };
    
    return (
      <Badge className={providerColors[sourceSystem as keyof typeof providerColors] || "bg-gray-100 text-gray-800"}>
        {sourceSystem.toUpperCase()}
      </Badge>
    );
  };

  const getStatusBadge = (asset: GeneratedAsset) => {
    // Check if video URL is accessible for HeyGen videos
    if (asset.source_system === 'heygen' || asset.source_system === 'heygen_zapier') {
      if (asset.url === 'processing' || asset.url === 'pending') {
        return (
          <Badge className="bg-yellow-100 text-yellow-800">
            PROCESSING
          </Badge>
        );
      }
      if (asset.url === 'failed' || asset.url?.includes('heygen.com') || asset.url?.includes('heygen-assets')) {
        return (
          <Badge className="bg-red-100 text-red-800">
            UNAVAILABLE
          </Badge>
        );
      }
    }
    
    if (asset.status === 'processing' || asset.runway_task_id) {
      return (
        <Badge className="bg-yellow-100 text-yellow-800">
          PROCESSING
        </Badge>
      );
    }
    return (
      <Badge className="bg-green-100 text-green-800">
        COMPLETED
      </Badge>
    );
  };

  const getStatusMessage = (asset: GeneratedAsset) => {
    if (asset.source_system === 'heygen' || asset.source_system === 'heygen_zapier') {
      if (asset.url === 'processing' || asset.url === 'pending') {
        return "Video is being generated by HeyGen. This may take a few minutes.";
      }
      if (asset.url === 'failed' || asset.url?.includes('heygen.com') || asset.url?.includes('heygen-assets')) {
        return "HeyGen video requires authentication or has access restrictions. Video will be downloaded automatically when webhook is received.";
      }
    }
    
    if (asset.runway_task_id) {
      return "Video is being processed by RunwayML. This may take a few minutes.";
    }
    
    return null;
  };

  // Helper function to check if asset can be saved to library
  const canSaveToLibrary = (asset: GeneratedAsset): asset is GeneratedAsset & { type: 'image' | 'video' | 'content' } => {
    return asset.type !== 'combo' && Boolean(asset.url);
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>Generated Assets & Messages</CardTitle>
        <CardDescription>Your AI-generated content and system messages</CardDescription>
      </CardHeader>
      <CardContent>
        {isGenerating && (
          <Alert className="mb-4 border-blue-200 bg-blue-50">
            <Info className="h-4 w-4" />
            <AlertDescription>
              <div className="flex items-center space-x-2">
                <div className="w-4 h-4 border-2 border-blue-600 border-t-transparent rounded-full animate-spin"></div>
                <span className="font-medium">Generating your content with RunwayML API...</span>
              </div>
              <p className="text-sm mt-1 text-blue-700">
                This may take a few moments. Images typically generate faster than videos.
              </p>
            </AlertDescription>
          </Alert>
        )}

        {assets.length === 0 && !isGenerating && (
          <Alert>
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>
              <strong>No assets generated yet.</strong>
              <br />
              Complete the steps above to start generating content:
              <ol className="list-decimal list-inside mt-2 space-y-1 text-sm">
                <li>Select a product image</li>
                <li>Provide and approve an instruction</li>
                <li>Click a generation button</li>
              </ol>
            </AlertDescription>
          </Alert>
        )}

        <div className="space-y-4">
          {assets.map((asset) => (
            <div key={asset.id} className="border rounded-lg p-4 space-y-3 bg-white shadow-sm">
              <div className="flex justify-between items-start">
                <div className="space-y-2 flex-1">
                  <div className="flex items-center space-x-2 flex-wrap">
                    <Badge className={getAssetTypeColor(asset.type)}>
                      {asset.type.toUpperCase()}
                    </Badge>
                    {getProviderBadge(asset.source_system)}
                    {getStatusBadge(asset)}
                    <span className="text-xs text-muted-foreground">
                      {asset.timestamp.toLocaleString()}
                    </span>
                  </div>
                  
                  <div className="space-y-1">
                    <p className="text-sm font-medium">Instruction:</p>
                    <p className="text-sm text-gray-700 bg-gray-50 p-2 rounded">{asset.instruction}</p>
                  </div>

                  {asset.message && (
                    <Alert className="border-green-200 bg-green-50">
                      <Info className="h-4 w-4" />
                      <AlertDescription className="text-sm text-green-800">
                        <strong>System Message:</strong> {asset.message}
                      </AlertDescription>
                    </Alert>
                  )}

                  {/* Status Message Alert */}
                  {getStatusMessage(asset) && (
                    <Alert className={
                      asset.url === 'failed' || asset.url?.includes('heygen.com') || asset.url?.includes('heygen-assets')
                        ? "border-red-200 bg-red-50"
                        : "border-yellow-200 bg-yellow-50"
                    }>
                      <Info className="h-4 w-4" />
                      <AlertDescription className={
                        asset.url === 'failed' || asset.url?.includes('heygen.com') || asset.url?.includes('heygen-assets')
                          ? "text-sm text-red-800"
                          : "text-sm text-yellow-800"
                      }>
                        <strong>Status:</strong> {getStatusMessage(asset)}
                      </AlertDescription>
                    </Alert>
                  )}

                  {asset.runway_task_id && (
                    <Alert className="border-yellow-200 bg-yellow-50">
                      <Info className="h-4 w-4" />
                      <AlertDescription className="text-xs text-yellow-800">
                        <strong>RunwayML Task ID:</strong> {asset.runway_task_id}
                        <br />
                        This asset is being processed asynchronously by RunwayML.
                      </AlertDescription>
                    </Alert>
                  )}
                </div>
                
                <div className="ml-4 flex flex-col space-y-2">
                  {/* Save to Library Button - only for non-combo assets */}
                  {canSaveToLibrary(asset) && (
                    <SaveAssetDialog
                      asset={{
                        id: asset.id,
                        type: asset.type,
                        url: asset.url,
                        instruction: asset.instruction,
                        content: asset.content,
                        source_system: asset.source_system,
                      }}
                    />
                  )}

                  {/* Download/Copy Button */}
                  {asset.type === 'content' ? (
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => handleCopyContent(asset)}
                      className="flex items-center space-x-1"
                    >
                      {copiedId === asset.id ? (
                        <Check className="h-4 w-4" />
                      ) : (
                        <Copy className="h-4 w-4" />
                      )}
                      <span>{copiedId === asset.id ? "Copied!" : "Copy"}</span>
                    </Button>
                  ) : (
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => handleDownload(asset)}
                      className="flex items-center space-x-1"
                      disabled={!asset.url}
                    >
                      <Download className="h-4 w-4" />
                      <span>Download</span>
                    </Button>
                  )}
                </div>
              </div>
              
              {asset.type === 'image' && asset.url && (
                <div className="space-y-2">
                  <p className="text-sm font-medium">Generated Image:</p>
                  <div className="border rounded overflow-hidden bg-gray-100">
                    <img 
                      src={asset.url} 
                      alt="Generated image from RunwayML"
                      className="w-full h-64 object-contain"
                      onLoad={() => console.log('Image loaded successfully:', asset.url)}
                      onError={(e) => {
                        console.error('Image failed to load:', asset.url);
                        e.currentTarget.style.display = 'none';
                      }}
                    />
                  </div>
                  <p className="text-xs text-gray-500">Image URL: {asset.url}</p>
                </div>
              )}
              
              {asset.type === 'video' && asset.url && (
                <div className="space-y-2">
                  <p className="text-sm font-medium">Generated Video:</p>
                  <div className="border rounded overflow-hidden bg-black">
                    <video 
                      src={asset.url} 
                      controls
                      className="w-full h-64 object-contain"
                      poster={asset.url}
                      onLoadedData={() => console.log('Video loaded successfully:', asset.url)}
                      onError={(e) => {
                        console.error('Video failed to load:', asset.url);
                      }}
                    >
                      Your browser does not support the video tag.
                    </video>
                  </div>
                  <p className="text-xs text-gray-500">Video URL: {asset.url}</p>
                </div>
              )}
              
              {asset.type === 'content' && asset.content && (
                <div className="space-y-2">
                  <p className="text-sm font-medium">Generated Marketing Content:</p>
                  <div className="bg-gray-50 p-3 rounded text-sm border">
                    <p className="whitespace-pre-wrap">{asset.content}</p>
                  </div>
                </div>
              )}

              {/* Debug information for troubleshooting */}
              <details className="text-xs text-gray-400">
                <summary className="cursor-pointer hover:text-gray-600">Debug Info</summary>
                <pre className="mt-2 bg-gray-100 p-2 rounded text-xs overflow-auto">
                  {JSON.stringify(asset, null, 2)}
                </pre>
              </details>
            </div>
          ))}
        </div>
      </CardContent>
    </Card>
  );
}
