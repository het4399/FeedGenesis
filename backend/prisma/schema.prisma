generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model ApiKey {
  id          String   @id @default(cuid())
  name        String
  key         String   @unique
  permissions String[]
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("api_keys")
}

model ClientConfig {
  id                  String                     @id @default(cuid())
  clientId            String                     @unique @map("client_id")
  clientName          String                     @map("client_name")
  createdAt           DateTime?                  @default(now()) @map("created_at")
  updatedAt           DateTime                @updatedAt @map("updated_at")
  templateAssignments ClientTemplateAssignment[]

  @@map("client_configs")
}

model ClientTemplateAssignment {
  id             String        @id @default(cuid())
  clientConfigId String?       @map("client_config_id")
  templateId     String        @map("template_id")
  templateName   String?       @map("template_name")
  assignedAt     DateTime?     @default(now()) @map("assigned_at")
  isActive       Boolean?      @default(true) @map("is_active")
  clientConfig   ClientConfig? @relation(fields: [clientConfigId], references: [id], onDelete: Cascade)

  @@map("client_template_assignments")
}

model GeneratedAsset {
  id             String         @id @default(cuid())
  profileId      String         @map("profile_id")
  inventoryId    String?        @map("inventory_id")
  channel        String
  format         String
  sourceSystem   String         @map("source_system")
  assetType      String         @map("asset_type")
  url            String
  instruction    String?
  approved       Boolean?       @default(false)
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")
  status         String?        @default("pending")
  
  // Template-specific fields
  templateAccessId String?      @map("template_access_id") // Reference to UserTemplateAccess
  variables      Json?          // Variables used for this generation
  
  // Webhook and Cloudinary integration fields
  metadata       Json?          @default("{}") // Store webhook data, Cloudinary URLs, etc.
  cloudinaryData Json?          @default("{}") // Store Cloudinary-specific data (public_id, etc.)
  
  // User management fields
  favorited      Boolean?       @default(false)
  title          String?
  description    String?
  tags           String[]       @default([])
  
  // Cost tracking fields
  generationCost Decimal?       @map("generation_cost") @db.Decimal(10,4) // Cost in USD
  processingTime Int?           @map("processing_time") // Time in seconds
  
  // Relations
  profile        Profile        @relation(fields: [profileId], references: [id], onDelete: Cascade)
  templateAccess UserTemplateAccess? @relation(fields: [templateAccessId], references: [id])
  socialMediaUploads SocialMediaUpload[]
  costRecord     GenerationCostRecord?

  @@index([profileId, createdAt])
  @@index([sourceSystem, createdAt])
  @@index([assetType, createdAt])
  @@index([status, createdAt])
  @@index([favorited])
  @@index([generationCost])
  @@map("generated_assets")
}

// Cost tracking for each generation
model GenerationCostRecord {
  id              String   @id @default(cuid())
  assetId         String   @unique @map("asset_id")
  profileId       String   @map("profile_id")
  sourceSystem    String   @map("source_system")
  assetType       String   @map("asset_type")
  
  // Cost breakdown
  baseCost        Decimal  @map("base_cost") @db.Decimal(10,4) // Base cost for generation
  processingCost  Decimal  @map("processing_cost") @db.Decimal(10,4) // Additional processing cost
  storageCost     Decimal  @map("storage_cost") @db.Decimal(10,4) // Storage cost
  totalCost       Decimal  @map("total_cost") @db.Decimal(10,4) // Total cost
  
  // Metadata
  processingTime  Int      @map("processing_time") // Time in seconds
  tokensUsed      Int?     @map("tokens_used") // For AI models
  quality         String?  // Quality level (basic, standard, premium)
  
  // Timestamps
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  // Relations
  asset           GeneratedAsset @relation(fields: [assetId], references: [id], onDelete: Cascade)
  profile         Profile        @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId, createdAt])
  @@index([sourceSystem, createdAt])
  @@index([assetType, createdAt])
  @@index([totalCost])
  @@map("generation_cost_records")
}

// Platform pricing configuration
model PlatformPricing {
  id              String   @id @default(cuid())
  platform        String   // 'heygen', 'openai', 'runwayml'
  assetType       String   @map("asset_type") // 'video', 'image', 'text'
  quality         String   // 'basic', 'standard', 'premium'
  
  // Pricing
  basePrice       Decimal  @map("base_price") @db.Decimal(10,4) // Base price per generation
  perSecondPrice  Decimal? @map("per_second_price") @db.Decimal(10,4) // Price per second (for videos)
  perTokenPrice   Decimal? @map("per_token_price") @db.Decimal(10,4) // Price per token (for AI)
  
  // Limits
  maxDuration     Int?     @map("max_duration") // Max duration in seconds
  maxTokens       Int?     @map("max_tokens") // Max tokens
  
  // Status
  isActive        Boolean  @default(true) @map("is_active")
  
  // Timestamps
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@unique([platform, assetType, quality])
  @@index([platform, assetType])
  @@map("platform_pricing")
}

// Webhook retry queue for failed webhooks
model WebhookRetry {
  id          String   @id @default(cuid())
  webhookData Json     // Store the original webhook payload
  retryCount  Int      @default(0)
  maxRetries  Int      @default(3)
  nextRetry   DateTime
  status      String   @default("pending") // pending, processing, completed, failed
  error       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("webhook_retries")
}

model Inventory {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Decimal?
  sku         String?  
  category    String?
  brand       String?
  images      String[] @default([])
  metadata    Json?    @default("{}")
  status      String   @default("active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("inventory")
}

model UserTemplateAccess {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  
  // External template info (from HeyGen/Runway)
  sourceSystem    String   @map("source_system") // 'heygen', 'runway'
  externalId      String   @map("external_id") // Original template ID from HeyGen/Runway
  
  // Template metadata (cached for display)
  templateName    String   @map("template_name")
  templateDescription String? @map("template_description")
  thumbnailUrl    String?  @map("thumbnail_url")
  category        String?
  aspectRatio     String?  @map("aspect_ratio")
  
  // Access control
  canUse      Boolean  @default(true) @map("can_use")
  
  // Usage tracking
  usageCount  Int      @default(0) @map("usage_count")
  lastUsedAt  DateTime? @map("last_used_at")
  
  // Timestamps
  selectedAt  DateTime @default(now()) @map("selected_at") // When user selected this template
  expiresAt   DateTime? @map("expires_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  user        Profile  @relation(fields: [userId], references: [id], onDelete: Cascade)
  generatedAssets GeneratedAsset[]
  variables   TemplateVariable[]

  @@unique([userId, sourceSystem, externalId])
  @@index([userId, lastUsedAt])
  @@index([templateName])
  @@index([sourceSystem])
  @@map("user_template_access")
}

model TemplateVariable {
  id              String   @id @default(cuid())
  templateAccessId String  @map("template_access_id")
  name            String
  type            String   // 'text', 'image', 'number'
  required        Boolean  @default(true)
  defaultValue    String?
  charLimit       Int?     @map("char_limit") 
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  // Relations
  templateAccess  UserTemplateAccess @relation(fields: [templateAccessId], references: [id], onDelete: Cascade)
  
  @@map("template_variables")
}

model Profile {
  id                       String                  @id @default(uuid())
  email                    String                  @unique
  firstName                String                  @map("first_name")
  lastName                 String                  @map("last_name")
  displayName              String?                 @map("display_name")
  initials                 String
  status                   ProfileStatus           @default(pending)
  role                     UserRole                @default(user)
  createdAt                DateTime                @default(now()) @map("created_at")
  updatedAt                DateTime                @updatedAt @map("updated_at")
  password                 String
  emailVerificationExpires DateTime?               @map("email_verification_expires")
  emailVerificationToken   String?                 @map("email_verification_token")
  emailVerified            Boolean                 @default(false) @map("email_verified")
  socialConnections        SocialMediaConnection[]
  socialMediaUploads       SocialMediaUpload[]
  generatedAssets          GeneratedAsset[]
  templateAccess           UserTemplateAccess[] // NEW
  costRecords              GenerationCostRecord[]

  @@index([role])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([emailVerified])
  @@map("profiles")
}

model SocialMediaConnection {
  id               String                  @id @default(cuid())
  profileId        String                  @map("profile_id")
  platform         String
  accessToken      String                  @map("access_token")
  refreshToken     String?                 @map("refresh_token")
  tokenExpiresAt   DateTime?               @map("token_expires_at")
  platformUserId   String                  @map("platform_user_id")
  platformUsername String?                 @map("platform_username")
  platformEmail    String?                 @map("platform_email")
  pageName         String?                 @map("page_name")
  isActive         Boolean                 @default(true) @map("is_active")
  createdAt        DateTime                @default(now()) @map("created_at")
  updatedAt        DateTime                @updatedAt @map("updated_at")
  channelId        String?                 @map("channel_id")
  cachedData       SocialMediaCachedData[]
  profile          Profile                 @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@unique([profileId, platform])
  @@map("social_media_connections")
}

model SocialMediaCachedData {
  id            String                @id @default(cuid())
  connectionId  String                @map("connection_id")
  dataType      String                @map("data_type")
  data          Json
  lastFetchedAt DateTime              @default(now()) @map("last_fetched_at")
  expiresAt     DateTime              @map("expires_at")
  createdAt     DateTime              @default(now()) @map("created_at")
  updatedAt     DateTime              @updatedAt @map("updated_at")
  connection    SocialMediaConnection @relation(fields: [connectionId], references: [id], onDelete: Cascade)

  @@unique([connectionId, dataType])
  @@map("social_media_cached_data")
}

model SocialMediaUpload {
  id            String   @id @default(cuid())
  profileId     String   @map("profile_id")
  platform      String   // 'youtube', 'instagram', 'tiktok', etc.
  contentType   String   @map("content_type") // 'video', 'image', 'post'
  uploadUrl     String   @map("upload_url") // Platform URL (e.g., YouTube video URL)
  platformId    String   @map("platform_id") // Platform-specific ID (e.g., YouTube video ID)
  title         String?
  description   String?
  tags          String[] @default([])
  metadata      Json?    @default("{}") // Platform-specific metadata
  status        String   @default("uploaded") // 'uploaded', 'failed', 'processing'
  errorMessage  String?  @map("error_message")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  
  // Optional reference to the original asset that was uploaded
  assetId       String?  @map("asset_id")
  asset         GeneratedAsset? @relation(fields: [assetId], references: [id], onDelete: SetNull)
  
  // Reference to the profile
  profile       Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId, createdAt])
  @@index([platform, createdAt])
  @@index([status, createdAt])
  @@map("social_media_uploads")
}

model SystemSettings {
  id                String   @id @default(cuid())
  key               String   @unique
  value             String
  description       String?
  category          String   @default("general") // general, security, upload, email, system
  isPublic          Boolean  @default(false) // whether non-admin users can read this setting
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@map("system_settings")
}

enum ProfileStatus {
  pending
  verified
}

enum UserRole {
  user
  admin
  superadmin
}
